syntax = "proto3";
import "github.com/AsynkronIT/protoactor-go/actor/protos.proto";
package message;

//Message from a new node to every coordinator, to discover if it is avalaible
message Hello {
	float ComputeCapability = 2;
}

//Response msg from coordinator to Hello msg
message Available {
    actor.PID sender = 1;
}

message NotAvailable {
}

//Message in response to peer when someone doesnt have the result in cache
message NotFound {
	string Operation = 1;
}

//Message sent from new node to his coordinator after receiving Available msg
message Register { }

message LookForCoordinator { }

//Message to new node from coordinator containing the peer list
message Welcome {
	map<string, actor.PID>  nodes = 1;
}

//Message sent to all peers when a new node enter the region
message NewNode {
	actor.PID newnode = 1;	
}

message DeadNode {
	actor.PID deadNode = 1;
}

//Message sent by a node to other nodes (also coordinator if necessary)
message RequestForCache {
    string Operation = 1;
	actor.PID sender = 2;
}

message RequestForCacheExternal {
    string Operation = 1;
	actor.PID sender = 2;
}

//Response msg for RequestForCache
message Response {
    string Result = 1;
}

//Msg from controller to peer
message AskForResult {
	string Operation = 1;
}

//Msg from peer to controller
message SearchInCache {
	string Operation = 1;
	actor.PID FromPeer = 2;
}

//Response msg from a peer to another peer
message ResponseFromCache {
	string Result = 1;
}

message LostConnectionCoordinator{
	actor.PID coordinator = 1;
}

message Ping {
    int64 Ping = 1;    
}

message Pong {
    int64 Pong = 1;
}

message GetPing {
    string Peer = 1;
}
